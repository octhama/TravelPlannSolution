using TravelPlannMauiApp.ViewModels;
using System.Diagnostics;

namespace TravelPlannMauiApp.Pages
{
    public partial class VoyageListPage : ContentPage
    {
        private readonly VoyageViewModel _viewModel;
        private string _lastUpdateTimestamp = "";

        public VoyageListPage(VoyageViewModel viewModel)
        {
            InitializeComponent();
            BindingContext = _viewModel = viewModel;
        }
        
        protected override async void OnAppearing()
        {
            base.OnAppearing();
            
            try 
            {
                Debug.WriteLine("=== OnAppearing - VoyageListPage ===");
                
                if (BindingContext is VoyageViewModel viewModel)
                {
                    // NOUVEAU : V√©rifier si un rafra√Æchissement est n√©cessaire
                    await CheckAndRefreshIfNeeded();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Erreur OnAppearing: {ex}");
                await DisplayAlert("Erreur", "Erreur lors du rechargement de la liste", "OK");
            }
        }

        // NOUVEAU : M√©thode pour v√©rifier et rafra√Æchir si n√©cessaire
        private async Task CheckAndRefreshIfNeeded()
        {
            try
            {
                Debug.WriteLine("=== V√âRIFICATION SIMPLE DU BESOIN DE RAFRA√éCHISSEMENT ===");
                
                // V√©rifier le flag SIMPLE
                bool forceReload = Preferences.Get("FORCE_VOYAGE_LIST_RELOAD", false);
                
                Debug.WriteLine($"Force reload flag: {forceReload}");
                
                if (forceReload)
                {
                    Debug.WriteLine("üîÑ RECHARGEMENT FORC√â D√âTECT√â - Rechargement des donn√©es...");
                    
                    // Recharger les donn√©es depuis la base
                    await _viewModel.LoadVoyagesAsync();
                    
                    // R√©initialiser le flag
                    Preferences.Set("FORCE_VOYAGE_LIST_RELOAD", false);
                    
                    Debug.WriteLine("‚úÖ Rafra√Æchissement FORC√â termin√©");
                }
                else
                {
                    Debug.WriteLine("‚ÑπÔ∏è Aucun rafra√Æchissement forc√© n√©cessaire");
                    
                    // Faire un chargement normal si la liste est vide
                    if (_viewModel.Voyages.Count == 0)
                    {
                        Debug.WriteLine("Liste vide - chargement initial");
                        await _viewModel.LoadVoyagesAsync();
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Erreur lors de la v√©rification du rafra√Æchissement: {ex}");
                // En cas d'erreur, faire un rechargement complet par s√©curit√©
                await _viewModel.LoadVoyagesAsync();
            }
        }

        protected override void OnDisappearing()
        {
            base.OnDisappearing();
            Debug.WriteLine("=== OnDisappearing - VoyageListPage ===");
        }

        // NOUVEAU : M√©thode publique pour forcer le rechargement imm√©diat
        public async Task ForceRefreshAsync()
        {
            try
            {
                Debug.WriteLine("=== ForceRefreshAsync - Rechargement forc√© ===");
                if (_viewModel != null)
                {
                    await _viewModel.LoadVoyagesAsync();
                    
                    // R√©initialiser le flag
                    Preferences.Set("FORCE_VOYAGE_LIST_RELOAD", false);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Erreur ForceRefreshAsync: {ex}");
            }
        }

        // NOUVEAU : M√©thode pour rafra√Æchir manuellement (Pull-to-refresh)
        private async void OnRefreshRequested(object sender, EventArgs e)
        {
            try
            {
                Debug.WriteLine("=== Rafra√Æchissement manuel demand√© ===");
                
                if (_viewModel != null)
                {
                    await _viewModel.LoadVoyagesAsync();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Erreur lors du rafra√Æchissement manuel: {ex}");
                await DisplayAlert("Erreur", "Erreur lors du rafra√Æchissement", "OK");
            }
        }
    }
}