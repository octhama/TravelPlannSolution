using TravelPlannMauiApp.ViewModels;
using System.Diagnostics;

namespace TravelPlannMauiApp.Pages
{
    public partial class VoyageListPage : ContentPage
    {
        private readonly VoyageViewModel _viewModel;

        public VoyageListPage(VoyageViewModel viewModel)
        {
            InitializeComponent();
            BindingContext = _viewModel = viewModel;
            
            // S'abonner aux messages de rafra√Æchissement
            MessagingCenter.Subscribe<object>(this, "RefreshVoyageList", async (sender) =>
            {
                Debug.WriteLine("=== MESSAGE REFRESH RE√áU ===");
                await RefreshVoyageListFromMessage();
            });
        }

        protected override async void OnAppearing()
        {
            base.OnAppearing();
            
            try 
            {
                Debug.WriteLine("=== OnAppearing - VoyageListPage ===");
                
                // V√©rifier si le param√®tre forceRefresh est pr√©sent
                if (Shell.Current?.CurrentState?.Location?.OriginalString?.Contains("forceRefresh=true") ?? false)
                {
                    Debug.WriteLine("Forcer le rechargement via param√®tre URL");
                    await _viewModel.ForceReloadFromDatabase();
                }
                else
                {
                    // Logique normale de v√©rification du flag
                    await CheckAndForceRefreshIfNeeded();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Erreur OnAppearing: {ex}");
                await DisplayAlert("Erreur", "Erreur lors du rechargement de la liste", "OK");
            }
        }

        // NOUVEAU : M√©thode qui FORCE syst√©matiquement le rechargement si flag pr√©sent
        private async Task CheckAndForceRefreshIfNeeded()
        {
            try
            {
                Debug.WriteLine("=== V√âRIFICATION SYST√âMATIQUE DU FLAG ===");
                
                // V√©rifier le flag
                bool forceReload = Preferences.Get("FORCE_VOYAGE_LIST_RELOAD", false);
                
                Debug.WriteLine($"Force reload flag: {forceReload}");
                
                if (forceReload)
                {
                    Debug.WriteLine("üîÑ FLAG D√âTECT√â - RECHARGEMENT FORC√â IMM√âDIAT");
                    
                    // R√©initialiser le flag IMM√âDIATEMENT pour √©viter les boucles
                    Preferences.Set("FORCE_VOYAGE_LIST_RELOAD", false);
                    
                    // Forcer le rechargement depuis la base de donn√©es
                    await _viewModel.ForceReloadFromDatabase();
                    
                    Debug.WriteLine("‚úÖ Rechargement forc√© termin√©");
                }
                else
                {
                    Debug.WriteLine("‚ÑπÔ∏è Pas de flag - chargement normal si n√©cessaire");
                    
                    // Chargement normal si la liste est vide
                    if (_viewModel.Voyages.Count == 0)
                    {
                        Debug.WriteLine("Liste vide - chargement initial");
                        await _viewModel.LoadVoyagesAsync();
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Erreur lors de la v√©rification: {ex}");
                // En cas d'erreur, faire un rechargement de s√©curit√©
                await _viewModel.LoadVoyagesAsync();
            }
        }

        // NOUVEAU : M√©thode appel√©e par les messages
        private async Task RefreshVoyageListFromMessage()
        {
            try
            {
                Debug.WriteLine("=== RAFRA√éCHISSEMENT VIA MESSAGE ===");
                await _viewModel.ForceReloadFromDatabase();
                Debug.WriteLine("‚úÖ Rafra√Æchissement via message termin√©");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Erreur rafra√Æchissement via message: {ex}");
            }
        }

        // M√©thode publique pour forcer le rechargement
        public async Task ForceRefreshAsync()
        {
            try
            {
                Debug.WriteLine("=== ForceRefreshAsync - Rechargement public ===");
                if (_viewModel != null)
                {
                    await _viewModel.ForceReloadFromDatabase();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Erreur ForceRefreshAsync: {ex}");
            }
        }

        protected override void OnDisappearing()
        {
            base.OnDisappearing();
            Debug.WriteLine("=== OnDisappearing - VoyageListPage ===");
        }

        // Nettoyage des abonnements
        protected override void OnBindingContextChanged()
        {
            base.OnBindingContextChanged();
        }

        // NOUVEAU : M√©thode pour nettoyer les abonnements
        ~VoyageListPage()
        {
            MessagingCenter.Unsubscribe<object>(this, "RefreshVoyageList");
        }
    }
}