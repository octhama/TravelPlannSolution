using TravelPlannMauiApp.ViewModels;
using System.Diagnostics;

namespace TravelPlannMauiApp.Pages
{
    public partial class VoyageListPage : ContentPage
    {
        private readonly VoyageViewModel _viewModel;
        private string _lastUpdateTimestamp = "";

        public VoyageListPage(VoyageViewModel viewModel)
        {
            InitializeComponent();
            BindingContext = _viewModel = viewModel;
        }
        
        protected override async void OnAppearing()
        {
            base.OnAppearing();
            
            try 
            {
                Debug.WriteLine("=== OnAppearing - VoyageListPage ===");
                
                if (BindingContext is VoyageViewModel viewModel)
                {
                    // NOUVEAU : V√©rifier si un rafra√Æchissement est n√©cessaire
                    await CheckAndRefreshIfNeeded();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Erreur OnAppearing: {ex}");
                await DisplayAlert("Erreur", "Erreur lors du rechargement de la liste", "OK");
            }
        }

        // NOUVEAU : M√©thode pour v√©rifier et rafra√Æchir si n√©cessaire
        private async Task CheckAndRefreshIfNeeded()
        {
            try
            {
                Debug.WriteLine("=== V√âRIFICATION DU BESOIN DE RAFRA√éCHISSEMENT ===");
                
                // V√©rifier le flag de rafra√Æchissement
                bool needsRefresh = Preferences.Get("voyage_list_needs_refresh", false);
                string currentTimestamp = Preferences.Get("last_voyage_update_timestamp", "");
                
                Debug.WriteLine($"Needs refresh flag: {needsRefresh}");
                Debug.WriteLine($"Current timestamp: {currentTimestamp}");
                Debug.WriteLine($"Last known timestamp: {_lastUpdateTimestamp}");
                
                // Conditions pour rafra√Æchir :
                // 1. Le flag needs_refresh est true
                // 2. Le timestamp a chang√© (nouvelle modification)
                // 3. Premi√®re fois qu'on charge la page (_lastUpdateTimestamp vide)
                
                bool shouldRefresh = needsRefresh || 
                                   (!string.IsNullOrEmpty(currentTimestamp) && currentTimestamp != _lastUpdateTimestamp) ||
                                   string.IsNullOrEmpty(_lastUpdateTimestamp);
                
                if (shouldRefresh)
                {
                    Debug.WriteLine("üîÑ RAFRA√éCHISSEMENT N√âCESSAIRE - Rechargement des donn√©es...");
                    
                    // Recharger les donn√©es depuis la base
                    await _viewModel.LoadVoyagesAsync();
                    
                    // Mettre √† jour le timestamp local
                    _lastUpdateTimestamp = currentTimestamp;
                    
                    // R√©initialiser le flag
                    Preferences.Set("voyage_list_needs_refresh", false);
                    
                    Debug.WriteLine("‚úÖ Rafra√Æchissement termin√©");
                }
                else
                {
                    Debug.WriteLine("‚ÑπÔ∏è Aucun rafra√Æchissement n√©cessaire - donn√©es √† jour");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Erreur lors de la v√©rification du rafra√Æchissement: {ex}");
                // En cas d'erreur, faire un rechargement complet par s√©curit√©
                await _viewModel.LoadVoyagesAsync();
            }
        }

        protected override void OnDisappearing()
        {
            base.OnDisappearing();
            Debug.WriteLine("=== OnDisappearing - VoyageListPage ===");
        }

        // NOUVEAU : M√©thode publique pour forcer le rechargement imm√©diat
        public async Task ForceRefreshAsync()
        {
            try
            {
                Debug.WriteLine("=== ForceRefreshAsync - Rechargement forc√© ===");
                if (_viewModel != null)
                {
                    await _viewModel.LoadVoyagesAsync();
                    
                    // Mettre √† jour le timestamp pour √©viter les doubles rechargements
                    _lastUpdateTimestamp = Preferences.Get("last_voyage_update_timestamp", "");
                    Preferences.Set("voyage_list_needs_refresh", false);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Erreur ForceRefreshAsync: {ex}");
            }
        }

        // NOUVEAU : M√©thode pour rafra√Æchir manuellement (Pull-to-refresh)
        private async void OnRefreshRequested(object sender, EventArgs e)
        {
            try
            {
                Debug.WriteLine("=== Rafra√Æchissement manuel demand√© ===");
                
                if (_viewModel != null)
                {
                    await _viewModel.LoadVoyagesAsync();
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Erreur lors du rafra√Æchissement manuel: {ex}");
                await DisplayAlert("Erreur", "Erreur lors du rafra√Æchissement", "OK");
            }
        }
    }
}